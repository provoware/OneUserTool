# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration            - Name: Node.js-Umgebung einrichten
  verwendet: actions/setup-node@v3.9.1
  mit:
    # Always-Auth in npmrc festlegen.
    always-auth: # optional, Standard ist false
    # Versionsangabe der zu verwendenden Version. Beispiele: 12.x, 10.15.1, >=10.15.0.
    Knotenversion: # optional
    # Datei mit der Versionsspezifikation der zu verwendenden Version. Beispiele: .nvmrc, .node-version, .tool-versions.
    Knotenversionsdatei: # optional
    # Zielarchitektur für Node. Beispiele: x86, x64. Standardmäßig wird die Systemarchitektur verwendet.
    Architektur: # optional
    # Legen Sie diese Option fest, wenn die Aktion nach der neuesten verfügbaren Version suchen soll, die die Versionsspezifikation erfüllt.
    check-latest: # optional
    # Optionales Register zum Einrichten der Authentifizierung. Das Register wird in einer .npmrc- und .yarnrc-Datei auf Projektebene eingerichtet und die Authentifizierung zum Einlesen aus env.NODE_AUTH_TOKEN eingerichtet.
    Registrierungs-URL: # optional
    # Optionaler Bereich für die Authentifizierung gegenüber bereichsbezogenen Registrierungen. Bei Verwendung der GitHub Packages-Registrierung (https://npm.pkg.github.com/) wird auf den Repository-Eigentümer zurückgegriffen.
    Umfang: # optional
    # Wird verwendet, um Knotenverteilungen aus Knotenversionen abzurufen. Da es einen Standardwert gibt, wird dieser normalerweise nicht vom Benutzer angegeben. Beim Ausführen dieser Aktion auf github.com ist der Standardwert ausreichend. Beim Ausführen auf GHES können Sie einen persönlichen Zugriffstoken für github.com übergeben, falls Sie eine Ratenbegrenzung feststellen.
    Token: # optional, Standard ist ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Wird verwendet, um einen Paketmanager für das Caching im Standardverzeichnis anzugeben. Unterstützte Werte: npm, yarn, pnpm.
    Cache: # optional
    # Wird verwendet, um den Pfad zu einer Abhängigkeitsdatei anzugeben: package-lock.json, yarn.lock usw. Unterstützt Platzhalter oder eine Liste von Dateinamen zum Zwischenspeichern mehrerer Abhängigkeiten.
    Cache-Abhängigkeitspfad: # optional
           file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
